import {
  Component,
  OnInit,
  ViewChild,
  ElementRef,
  AfterViewInit,
  OnDestroy,
} from '@angular/core';
import {
  Map,
  MapStyle,
  Marker,
  GeoJSONSourceSpecification,
} from '@maptiler/sdk';
import { Config } from '@maptiler/sdk';
import { MovementService } from '../movement.service';
import { Movement } from '../movement';
import { HttpErrorResponse } from '@angular/common/http';
import { Router } from '@angular/router';
import '@maptiler/sdk/dist/maptiler-sdk.css';
import '@maptiler/sdk';

// Create a GeoJSON source with LineString geometry

@Component({
  selector: 'app-movement-map',
  templateUrl: './movement-map.component.html',
  styleUrls: ['./movement-map.component.css'],
})
export class MovementMapComponent implements OnInit, AfterViewInit, OnDestroy {
  map: Map | undefined;
  apiKey = '2y11IsDWcbWsk7LeLPE6';
  public movements: Movement[] = [];
  public movement: Movement = {
    id: 0,
    accountCompany: '',
    newMovementReason: '',
    newSpecies: '',
    newOriginAddress: '',
    newOriginCity: '',
    newOriginName: '',
    newOriginPostalCode: '',
    newOriginPremId: '',
    newOriginState: '',
    newDestinationAddress: '',
    newDestinationCity: '',
    newDestinationName: '',
    newDestinationPostalCode: '',
    newDestinationPremId: '',
    newDestinationState: '',
    originLat: 0,
    originLon: 0,
    destinationLat: 0,
    destinationLon: 0,
    newNumItemsMoved: 0,
    newShipmentsStartDate: '',
  };

  constructor(
    private movementService: MovementService,
    private router: Router,
  ) {}

  @ViewChild('map')
  private mapContainer!: ElementRef<HTMLElement>;

  ngOnInit(): void {
    this.getMovements();
    const geoJSONObject = this.convertMovementsToGeoJSON(this.movements);

    console.log(JSON.stringify(geoJSONObject, null, 2));

    const initialState = {
      lng: -122.48369693756104,
      lat: 37.83381888486939,
      zoom: 2,
    };

    this.map = new Map({
      container: this.mapContainer.nativeElement,
      style: MapStyle.STREETS,
      center: [initialState.lng, initialState.lng],
      zoom: initialState.zoom,
      apiKey: this.apiKey,
    });

    const originPoints = this.movements.map((movement) => [
      movement.originLon,
      movement.originLat,
    ]);

    const destinationPoints = this.movements.map((movement) => [
      movement.destinationLon,
      movement.destinationLat,
    ]);

    originPoints.forEach((point) => {
      new Marker({ color: '#00FF00' })
        .setLngLat([point[0], point[1]])
        .addTo(this.map!);
    });

    destinationPoints.forEach((point) => {
      new Marker({ color: '#FF0000' })
        .setLngLat([point[0], point[1]])
        .addTo(this.map!);
    });


  }

  ngAfterViewInit(): void {
    const initialState = {
      lng: -122.48369693756104,
      lat: 37.83381888486939,
      zoom: 2,
    };

    this.map = new Map({
      container: this.mapContainer.nativeElement,
      style: MapStyle.STREETS,
      center: [initialState.lng, initialState.lng],
      zoom: initialState.zoom,
      apiKey: this.apiKey,
    });

    const originPoints = this.movements.map((movement) => [
      movement.originLon,
      movement.originLat,
    ]);

    const destinationPoints = this.movements.map((movement) => [
      movement.destinationLon,
      movement.destinationLat,
    ]);

    originPoints.forEach((point) => {
      new Marker({ color: '#00FF00' })
        .setLngLat([point[0], point[1]])
        .addTo(this.map!);
    });

    destinationPoints.forEach((point) => {
      new Marker({ color: '#FF0000' })
        .setLngLat([point[0], point[1]])
        .addTo(this.map!);
    });

  }

  ngOnDestroy(): void {
    this.map?.remove();
  }

  public getMovements(): void {
    this.movementService.getMovements().subscribe(
      (response: Movement[]) => {
        this.movements = response;
      },
      (error: HttpErrorResponse) => {
        alert(error.message);
      }
    );
  }


}
